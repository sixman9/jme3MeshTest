//gradle.build - run 'gradle tasks' or 'gradlew tasks'  for help
//See also www.gradle.org for more details

version = 0.1

apply plugin: 'java'
//apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'eclipse'

//[project] Templates plugin
apply from: 'http://launchpad.net/gradle-templates/trunk/latest/+download/apply.groovy'

apply plugin:'application'
mainClassName = 'jme3test.model.shape.TestCustomMesh'

//Libraries to aid this build script itself
buildscript {
    repositories {
	mavenLocal()
        mavenCentral()
        //mavenRepo name: "repoAlias" url: "http://repository.example.org/maven2/"
    }

    dependencies {
        //classpath "group:artefact:version", "etc."
    }
}

//Maven library repositories definitions - see https://repository.sonatype.org , http://mvnrepository.com and http://search.maven.org
repositories {
    mavenCentral()
    //mavenRepo url: "http://repository.example.org/maven2/"
	mavenRepo url: "http://oss.sonatype.org/content/repositories/snapshots"
}

//configurations - RTFM ;-)
/*
configurations {
	all*.exclude group: 'xml-apis',  module: 'xml-apis'
}
*/

//Tell Gradle where our source files live (default = <project>/source/main/java|groovy|etc)
sourceSets {
    main {
        java {
            srcDir 'src'
        }
        resources {
            srcDir 'src/resources'
        }
    }
}

//jMonkeyEngine release version
jme3ReleaseVersion='3.0.0.20120512-SNAPSHOT'

//Actual project dependencies
dependencies {
        //compile "group:artefact:version", "etc."
        //runtime "group:artefact:version", "etc."
        //provided "group:artefact:version", "etc."
		//compile|runtime files('libs/a.jar', 'libs/b.jar')
		//compile|runtime fileTree(dir: 'libs', include: '*.jar')
		
		//jMonkeyEngine lib reference, for local files
		//compile fileTree(dir: '../jME3_2012-12-17/lib/', include: '*.jar')
		
		//jMonkeyEngine libs at Maven Repo
		compile "com.jme3:eventbus:$jme3ReleaseVersion"
		compile "com.jme3:j-ogg-oggd:$jme3ReleaseVersion"
		compile "com.jme3:j-ogg-vorbisd:$jme3ReleaseVersion"
		compile "com.jme3:jME3-blender:$jme3ReleaseVersion"
		compile "com.jme3:jME3-core:$jme3ReleaseVersion"
		compile "com.jme3:jME3-desktop:$jme3ReleaseVersion"
		compile "com.jme3:jME3-effects:$jme3ReleaseVersion"
		compile "com.jme3:jME3-jbullet:$jme3ReleaseVersion"
		compile "com.jme3:jME3-jogg:$jme3ReleaseVersion"
		compile "com.jme3:jME3-lwjgl-natives:$jme3ReleaseVersion"
		compile "com.jme3:jME3-lwjgl:$jme3ReleaseVersion"
		compile "com.jme3:jME3-networking:$jme3ReleaseVersion"
		compile "com.jme3:jME3-niftygui:$jme3ReleaseVersion"
		compile "com.jme3:jME3-plugins:$jme3ReleaseVersion"
		compile "com.jme3:jME3-terrain:$jme3ReleaseVersion"
		compile "com.jme3:jME3-testdata:$jme3ReleaseVersion"
		compile "com.jme3:jbullet:$jme3ReleaseVersion"
		compile "com.jme3:jinput:$jme3ReleaseVersion"
		compile "com.jme3:lwjgl:$jme3ReleaseVersion"
		compile "com.jme3:nifty-default-controls:$jme3ReleaseVersion"
		compile "com.jme3:nifty-examples:$jme3ReleaseVersion"
		compile "com.jme3:nifty-style-black:$jme3ReleaseVersion"
		compile "com.jme3:nifty:$jme3ReleaseVersion"
		compile "com.jme3:stack-alloc:$jme3ReleaseVersion"
		compile "com.jme3:vecmath:$jme3ReleaseVersion"
		compile "com.jme3:xmlpull-xpp3:$jme3ReleaseVersion"
}

//Generate self-distributing Gradle wrapper - BTW, simple task definition
task('wrapper', type: Wrapper).configure {
    gradleVersion = '1.3'
}

//sdk version variable - used for IDE setup (later) 
def versionCompatibility = 1.6

jar {
    from(configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }

    manifest {
        attributes 'Implementation-Title': project.name,
                'Implementation-Version': version,
                'Built-By': System.getProperty('user.name'),
                'Built-Date': new Date(),
                'Built-JDK': System.getProperty('java.version'),
                'Main-Class': mainClassName
    }
}

//task runJar(dependsOn:[build]) << {
task runJar << {
  ant.java(jar: jar.archivePath ,fork:true)
}

/*
Choose Eclipse project natures from the following:
	"com.springsource.sts.grails.core.nature",
	"org.eclipse.jdt.core.javanature",
	"com.springsource.sts.gradle.core.nature",
	"org.eclipse.jdt.groovy.core.groovyNature"
*/

//From the Eclipse plugin - manipulates the project file and classpath etc.
eclipse {
	project {
		comment = "JLLVM - LLVM analysis in Java"

		buildCommand "org.eclipse.jdt.core.javabuilder"

		natures "com.springsource.sts.grails.core.nature",
			"org.eclipse.jdt.core.javanature",
	        "com.springsource.sts.gradle.core.nature"
	}

	classpath {
        	containers "com.springsource.sts.gradle.classpathcontainer"
	}
}

//From the idea plugin - manipulates the project file's XML etc.
idea {
	project {
        	jdkName = versionCompatibility

		ipr {
        		withXml { provider ->
            		def node = provider.asNode()
            		
            		// Use GIT
        		def vcsConfig = node.component.find { it.'@name' == 'VcsDirectoryMappings' }
        		vcsConfig.mapping[0].'@vcs' = 'Git'
			
            		// Set Gradle home
            		def gradleSettings = node.appendNode('component', [name: 'GradleSettings'])
            		gradleSettings.appendNode('option', [name: 'SDK_HOME', value: gradle.gradleHomeDir])
        		}
		}
	}
}
